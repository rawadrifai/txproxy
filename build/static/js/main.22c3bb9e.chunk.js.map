{"version":3,"sources":["aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["awsmobile","aws_project_region","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","require","TxProxy","Amplify","configure","App","INITIAL_STATE","tx","txhash","state","_this","handleTxInput","e","setState","target","value","handleTxHashInput","getTx","_callee","response","regenerator_default","a","wrap","_context","prev","next","API","get","sent","console","log","JSON","stringify","stop","this","broadcastTx","_callee2","body","init","_context2","post","react_default","createElement","Container","Divider","Header","size","className","HeaderSubheader_default","Segment","Grid","columns","relaxed","Column","Input","onChange","Button","onClick","vertical","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22c3bb9e.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-west-2\",\n    \"aws_content_delivery_bucket\": \"txproxy-20190220225753-hostingbucket-dev\",\n    \"aws_content_delivery_bucket_region\": \"us-west-2\",\n    \"aws_content_delivery_url\": \"http://txproxy-20190220225753-hostingbucket-dev.s3-website-us-west-2.amazonaws.com\"\n};\n\n\nexport default awsmobile;\n","import React, { Component } from 'react';\nimport { Button, Input, Container, Image, Segment, Grid, Divider, Header } from 'semantic-ui-react';\nimport { API } from 'aws-amplify';\nimport './App.css';\nimport Amplify from 'aws-amplify';\nimport awsmobile from './aws-exports';\nimport HeaderSubHeader from 'semantic-ui-react/dist/commonjs/elements/Header/HeaderSubheader';\nconst TxProxy = require('txproxy').TxProxy;\n\nAmplify.configure(awsmobile);\n\nclass App extends Component {\n\n  INITIAL_STATE = {\n    tx: '',\n    txhash: ''\n  };\n  state = this.INITIAL_STATE;\n\n\n  handleTxInput = e => {\n    this.setState({\n      tx: e.target.value\n    });\n  }\n\n  handleTxHashInput = e => {\n    this.setState({\n      txhash: e.target.value\n    });\n  }\n\n  getTx = async () => {\n    const response = await API.get('txapi', '/tx/' + this.state.txhash);\n    console.log(JSON.stringify(response, null, 2));\n  }\n\n  broadcastTx = async () => {\n    const body = {\n      tx: this.state.tx\n    };\n\n    let init = {\n      body: body\n    }\n    const response = await API.post('txapi', '/tx', init);\n    console.log(JSON.stringify(response, null, 2));\n  }\n\n\n\n  render() {\n    return (\n\n      <Container>\n        <Divider /><Divider />\n\n        <Header size='huge' className='App-header'>txproxy.io</Header>\n        <HeaderSubHeader>Broadcast and retrieve transactions.</HeaderSubHeader>\n        <Divider /><Divider /><Divider />\n\n\n        <Segment>\n          <Grid columns={2} relaxed='very'>\n            <Grid.Column>\n              <h3>Enter transaction hash</h3>\n              <Divider />\n              <Input onChange={this.handleTxHashInput} className='tbx' />\n              <Button onClick={this.getTx}>get tx</Button>\n            </Grid.Column>\n            <Grid.Column>\n              <h3>Enter signed transaction</h3>\n              <Divider />\n              <Input onChange={this.handleTxInput} className='tbx' />\n              <Button onClick={this.broadcastTx}>broadcast tx</Button>\n            </Grid.Column>\n          </Grid>\n\n          <Divider vertical>/</Divider>\n        </Segment>\n\n      </Container >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}